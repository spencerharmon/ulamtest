/**
	\author Spencer Harmon
	\license lgpl
	\symbol Ad
	\symmetries all
	\color #b52
	
 */
element Add : Agent{
	Int value;
	DebugUtils du;

	typedef EventWindow.SiteNum SiteNum;
	
	Int typeFunction(Atom c){
		Int ret;
		if(c as Add){
			ret = value + c.value;
		}else if(c as CloseParenth){
			ret = value + c.value;
		}
		return ret;
	}
	Int typeFunction(Atom c, Atom p){
		Int ret;
		if(c as Add){
			if(p as Add){
				ret = value + c.value + p.value;
			}
		}else if(c as CloseParenth){
			if(p as Add){
				ret = value + c.value + p.value;
			}
		}
		return ret;
	}

	Void overwrite(Int val, ID p, ID c, SiteNum cSlot, SiteNum pSlot){
		Atom a = ew[cSlot];
		if(a as CloseParenth){
			CloseParenth cp;
			cp.value = val;
			cp.parent = p;
			cp.child = c;

			ew[cSlot] = cp.atomof;
			ew[pSlot] = cp.atomof;
		}else if(a as Add){
			Add ad;
			ad.value = val;
			ad.parent = p;
			ad.child = c;

			ew[cSlot] = ad.atomof;
			ew[pSlot] = ad.atomof;
		}

//		if(cNew as Add){
//			cNew.value = val;
//			cNew.parent = p;
//			cNew.child = c;
//			ew[cSlot] = cNew;
//		}else if(cNew as CloseParenth){
//			cNew.value = val;
//			cNew.parent = p;
//			cNew.child = c;
//			ew[cSlot] = cNew;
//		}
//		if(pNew as Add){
//			pNew.value = val;
//			pNew.parent = p;
//			pNew.child = c;
//			ew[pSlot] = pNew;
//		}else if(pNew as CloseParenth){
//			pNew.value = val;
//			pNew.parent = p;
//			pNew.child = c;
//			ew[pSlot] = pNew;
//		}
	}

	Void behave(){
		SiteNum cSlot = findChild();
		SiteNum pSlot = findParent();
		collapse(cSlot,pSlot);
		clusterDiffuse();
	}
}
