/**
	\author Spencer Harmon
	\license lgpl
	\symbol Ad
	\symmetries all
	\color #b52
	
 */
element Add : Agent{
	Int value;

	typedef EventWindow.SiteNum SiteNum;
	
	Atom me(){
		Add a;
		a.parent = parent;
		a.child = child;
		a.value = value;
		return a.atomof;
	}
	Int typeFunction(Atom c){
		Int ret;
		if(c as Add){
			ret = value + c.value;
		}
		return ret;
	}
	Atom evaluateParenthesis(ID c, ID p){
		OpenParenth op;
		op.value = value;
		op.parent = p;
		op.child = c;
		return op;
	}
	Void overwrite(Int val, ID p, ID c, SiteNum slot){
		Atom a = ew[slot];
		if(a as Add){
			Add ad;
			ad.value = val;
			ad.parent = p;
			ad.child = c;

			ew[slot] = ad.atomof;
			ew[0] = ad.atomof;
		}
	}

	Void behave(){
		SiteNum cSlot = findChild();
		SiteNum pSlot = findParent();
		collapse(cSlot,pSlot);
		clusterDiffuse();
	}
}
