/**
	\author Spencer Harmon
	\license lgpl
	\symbol Ad
	\symmetries all
	\color #b52
	
 */
element Add : Agent{
	Int value;
	Bool evaluated;

	typedef EventWindow.SiteNum SiteNum;
	
	Bool checkEvalStatus(){
		return evaluated;
	}
	Int getValue(){
		return value;
	}
	Unsigned numCopiesNearMe(){
		Unsigned num;
		for(SiteNum i = 1; i < 41; ++i){
			Atom a = ew[i];
			if(a as Add){
				if(a.child == child && a.parent == parent && a.value == value){
					++num;
				}
			}
		}
		return num;
	}
	Atom me(){
		return self;
	}
	Int typeFunction(Atom c){
		Int ret;
		if(c as Add){
			ret = value + c.value;
		}
		return ret;
	}
	Bool overwrite(Int val, ID p, ID c, SiteNum slot){
		Atom a = ew[slot];
		if(a as Add){
			Add ad;
			ad.value = val;
			ad.parent = p;
			ad.child = c;
			ad.evaluated = true;

			ew[slot] = ad.atomof;
			return true;
		}else return false;
	}

	Void behave(){
		SiteNum cSlot = findChild();
		SiteNum pSlot = findParent();
		if(!collapse(cSlot,pSlot)){
			clusterDiffuse();
		}
	}
}
