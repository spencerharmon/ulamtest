/**
	\author Spencer Harmon
	\license lgpl
	\symbol Sb
	\symmetries all
	\color #f52
	
 */
element Subtract : Agent{
	Int value;

	typedef EventWindow.SiteNum SiteNum;
	
	Bool noCopiesNearMe(){
		for(SiteNum i = 1; i < 41; ++i){
			Atom a = ew[i];
			if(a as Subtract){
				if(a.child == child && a.parent == parent && a.value == value){
					return false;
				}
			}
		}
		return true;
	}
	Atom me(){
		return self;
	}	
	Int typeFunction(Atom c){
		Int ret;
		if(c as Subtract){
			ret = value - c.value;
		}
		return ret;
	}
	Atom evaluateParenthesis(ID c, ID p){
		OpenParenth op;
		op.value = value;
		op.parent = p;
		op.child = c;
		return op;
	}
	Void overwrite(Int val, ID p, ID c, SiteNum slot){
		Atom a = ew[slot];
		if(a as Subtract){
			Subtract s;
			s.value = val;
			s.parent = p;
			s.child = c;

			ew[slot] = s.atomof;
		}
	}
	Void overwrite(Int val, ID p, ID c, SiteNum cSlot, SiteNum pSlot){
		Atom a = ew[cSlot];
		if(a as Subtract){
			Subtract s;
			s.value = val;
			s.parent = p;
			s.child = c;

			ew[cSlot] = s.atomof;
			ew[pSlot] = s.atomof;
			ew[0] = s.atomof;
		}
	}

	Void behave(){
		SiteNum cSlot = findChild();
		SiteNum pSlot = findParent();
		if(!collapse(cSlot,pSlot)){
			clusterDiffuse();
		}
	}
}
