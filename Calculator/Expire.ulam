/**
	\author Spencer Harmon
	\license lgpl
	\symbol Ex
	\symmetries all
	\color #f33
 */
element Expire : Agent{
	Int value;

	typedef EventWindow.SiteNum SiteNum;

	Bool checkEvalStatus(){
		return false;
	}
	Bool noCopiesNearMe(){
		for(SiteNum i = 1; i < 41; ++i){
			Atom a = ew[i];
			if(a as Expire){
				if(a.child == child && a.parent == parent){
					return false;
				}
			}
		}
		return true;
	}
	Atom me(){
		return self;
	}
	Int typeFunction(Atom a){
		Int ret;
		return ret;
	}
	Int typeFunction(Atom a, Atom b){
		Int notvirtual;
		return notvirtual;
	}
	Atom evaluateParenthesis(ID n, ID a){
		Empty e;
		return e;
	}
	Void overwrite(Int i, ID p, ID c, SiteNum s1, SiteNum s2){
		Bool virt = false;
	}
	Void overwrite(Int i, ID p, ID c, SiteNum s1){
		Bool virt = false;
	}
	Bool exp(){
		Bool b;
		for(SiteNum i = 1; i < 41; ++i){
			Atom a = ew[i];
			if(a as Agent){
				if(a.parent == parent && a.child == child){
					Res r;
					ew[i] = r;
					b = true;
				}
			}
		}
		return b;
	}
	Void behave(){
		if(!exp()){
			agentCluster();
			 if(r.oneIn(50)){
				die();
			}
		}
	}
}
