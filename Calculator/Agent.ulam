quark Agent{
	EventWindow ew;
	AtomUtils au;
	Cluster cl;
	DebugUtils du;
	DregResUtils dru;

	typedef Unsigned(16) ID;
	typedef EventWindow.SiteNum SiteNum;
	typedef AtomUtils.Type Type;

	ID parent;
	ID child;

	Void clusterDiffuse(){
		SiteNum sChild;
		SiteNum sParent;
		SiteNum direction;
		direction = cl.emptySlotNearMe();
		Unsigned familySeen = 0;
		for(SiteNum i = 1; i<41; ++i){
			Atom a = ew[i];
			if(a as Agent){
				if(a.child == parent){
					SiteNum slot = cl.emptySlotNearMe();
					ew.swap(i,slot);
					++familySeen;
				}
				if(a.parent == child){
					SiteNum slot = cl.emptySlotNearMe();
					ew.swap(i,slot);
					++familySeen;
				}
			}
		}
		if(familySeen != 2u || parent == 0 && familySeen == 1u){
			//diffuse();
			copySelf();
		}
		agentCluster();

	}
	virtual Atom me();
	Void copySelf(){
			SiteNum slot = dru.resSlotNearMe();
			Atom a = me();
			ew[slot] = a;
	}
	Void agentCluster(){
		for(SiteNum i = 1; i < 41; ++i){
			Atom a = ew[i];
			if(a as Agent){
				SiteNum slot = cl.emptySlotNearMe();
				ew.swap(slot,i);
			}
		}
		SiteNum slot = cl.emptySlotNearMe();
		ew.swap(0,slot);
	}
	Void diffuse(){
		SiteNum slot = cl.emptySlotNearMe();
		ew.swap(0,slot);
	}
	SiteNum findChild(){
		for(SiteNum i = 1; i <41; ++i){
			Atom a = ew[i];
			if(a as Agent){
				if(a.parent == child){
					return i;
				}
			}else{
				SiteNum ret = 0;
				return ret;
			}
		}
		return 0;
	}
	SiteNum findParent(){
		for(SiteNum i = 1; i <41; ++i){
			Atom a = ew[i];
			if(a as Agent){
				if(a.child == parent){
					return i;
				}
			}else{
				SiteNum ret = 0;
				return ret;
			}
		}
		return 0;
	}
	virtual Int typeFunction(Atom a);
//	virtual Int typeFunction(Atom c, Atom p);
//	virtual Void overwrite(Int val, ID p, ID c, SiteNum cSlot, SiteNum pSlot);
	virtual Void overwrite(Int val, ID p, ID c, SiteNum slot);
	virtual Atom evaluateParenthesis(ID c, ID p);
	Void operateOnChild(Atom c,SiteNum cSlot){
		Int val = typeFunction(c);
		if(c as Agent){
			overwrite(val,parent,c.child,cSlot);
		}
	}
	Void operateOnParent(Atom p,SiteNum pSlot){
		Int val = typeFunction(p);
		if(p as Agent){
			overwrite(val,p.parent,child,pSlot);
		}
	}
	Void operateOnBoth(Atom c, Atom p,SiteNum cSlot,SiteNum pSlot){
	//	Int val = typeFunction(c,p);
		if(c as Agent){
			if(p as Agent){
			//	overwrite(val,p.parent,c.child,cSlot,pSlot);
			}
		}
	}
	virtual Void collapse(SiteNum cSlot, SiteNum pSlot){
		Atom p = ew[pSlot];
		Atom c = ew[cSlot];

		Int val; 
		if(cSlot > 0){
			if(pSlot > 0){
				//can see both
				if(p as OpenParenth){
					if(c as CloseParenth){
						Atom a = evaluateParenthesis(p.child,p.parent);
						ew[pSlot] = a;
						
						CloseParenth cp;
						cp.child = c.child;
						cp.parent = parent;
						ew[cSlot] = cp;
						ew[0] = cp;
					}else{
						//don't operate on openparenth
						operateOnChild(c,cSlot);
					}
				}else{
					//operateOnBoth(c,p,cSlot,pSlot);
				}
			}else{
				//can see child only
				//testing only operate if parent is closeparenth
				//this should force left-to-right operation, but
				//sacrifice a higher possible rate of operation.
				//operateOnChild(c,cSlot);
			}
		}else if(pSlot > 0){
			//parent only
			//operateOnParent(p,pSlot);
		}else{
			//neither
			//diffuse();
		}
	}
	Atom changeType(Atom a, Int val, ID p, ID c){
		Atom n;
		n = au.new(au.getType(a));
		if(n as OpenParenth){
			n.value = val;
			n.parent = p;
			n.child = c;
			return n;
		}else if(n as CloseParenth){
			n.value = val;
			n.parent = p;
			n.child = c;
			return n;
		}else if(n as Add){
			n.value = val;
			n.parent = p;
			n.child = c;
			return n;
		}else{
			Atom a;
			return a;
		}
	}
	Void die(){
		Res r;
		ew[0] = r;
	}
}
