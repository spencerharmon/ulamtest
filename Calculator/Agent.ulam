use DReg;
quark Agent{
	EventWindow ew;
	AtomUtils au;
	Random r;
	Cluster cl;
	DebugUtils du;
	DregResUtils dru;

	typedef Unsigned(15) ID;
	typedef EventWindow.SiteNum SiteNum;
	typedef AtomUtils.Type Type;
        parameter Unsigned resthreshold = 10u;
        parameter Unsigned copythreshold = 1u;	
	ID parent;
	ID child;

	Void clusterDiffuse(){
		agentCluster();
		Unsigned numCopies = numCopiesNearMe();
		if(numCopies < copythreshold){
			copySelf();
		}else if(numCopies > 0u && lowrescount()){
			die();
		}
	}
	Bool lowrescount(){
		Unsigned rescount;
		for(SiteNum i = 1; i < 41; ++i){
			Atom a = ew[i];
			if(a as Res){
				++rescount;
			}
		}
		if(rescount < resthreshold){
			return true;
		}else return false;
	}
	virtual Unsigned numCopiesNearMe();
	virtual Atom me();
	virtual Int getValue();
	virtual Bool checkEvalStatus();
	Void copySelf(){
			SiteNum slot = dru.resSlotNearMe();
			Atom a = me();
			if(slot > 0){
				ew[slot] = a;
			}
	}
	Void agentCluster(){
		for(SiteNum i = 1; i < 41; ++i){
			Atom a = ew[i];
			if(a as Agent){
//				if(a.child == parent || a.parent == child || r.oneIn(10)){
					SiteNum slot = cl.emptySlotNearMe();
					ew.swap(slot,i);
//				}
			}
		}
	}
	Void diffuse(){
		SiteNum slot = cl.emptySlotNearMe();
		ew.swap(0,slot);
	}
	SiteNum findChild(){
		for(SiteNum i = 1; i <41; ++i){
			Atom a = ew[i];
			if(a as Agent){
				Atom b = ew[i];
				//only function needs to worry about Data
				if(b as Data){
					if(self as Function){
						if(a.parent == child){
							return i;
						}
					}
				//nothing needs to worry about Function
				}else if(b as Function){
					//do nothing
				}else if(a.parent == child){
					return i;
				}
			}
		}
		return 0;
	}
	SiteNum findParent(){
		for(SiteNum i = 1; i <41; ++i){
			Atom a = ew[i];
			if(a as Agent){
				if(a.child == parent){
					return i;
				}
			}
		}
		return 0;
	}
	virtual Int typeFunction(Atom a);
	virtual Bool overwrite(Int val, ID p, ID c, SiteNum slot);

	Void evalOParenth(ID c, ID p, SiteNum slot){
		OpenParenth op;
		op.value = getValue();
		op.parent = p;
		op.child = c;
		op.evaluated = true;
		ew[slot] = op;
	}
	Void evalCParenth(ID c, ID p, SiteNum slot, Unsigned evolution){
		CloseParenth cp;
		++evolution;
		cp.evolution = evolution;
		cp.preventFunctionShift = true;
		cp.child = c;
		cp.parent = p;
		ew[slot] = cp;


	}
	Void expireChild(Atom c){
		expireAgent(c);
	}
	Void expireParent(Atom p){
		expireAgent(p);		
	}
	Void expireAgent(Atom a){
		Atom e = expire(a);
		SiteNum slot = dru.resSlotNearMe();
		if(slot > 0){
			ew[slot] = e;
		}
		
	}
	Void expireSelf(){
		expireAgent(me());
	}

	Bool operateOnChild(Atom c,SiteNum cSlot){
		Int val = typeFunction(c);
		if(c as Agent){
			Bool ret = overwrite(val,parent,c.child,cSlot);
			return ret;
		}else return false;
	}
	Atom expire(Atom a){
		if(a as Add){
			Expire e;
			e.type = 0u;
			e.value = a.value;
			e.parent = a.parent;
			e.child = a.child;
			return e;
		}else if(a as Subtract){
			Expire e;
			e.type = 1u;
			e.value = a.value;
			e.parent = a.parent;
			e.child = a.child;
			return e;
		}else if(a as Divide){
			Expire e;
			e.type = 2u;
			e.value = a.value;
			e.parent = a.parent;
			e.child = a.child;
			return e;
		}else if(a as Multiply){
			Expire e;
			e.type = 3u;
			e.value = a.value;
			e.parent = a.parent;
			e.child = a.child;
			return e;
		}else if(a as OpenParenth){
			Expire e;
			e.type = 4u;
			e.value = a.value;
			e.parent = a.parent;
			e.child = a.child;
			return e;
		}else if(a as CloseParenth){
			Expire e;
			e.type = 5u;
			e.parent = a.parent;
			e.child = a.child;
			return e;
		}else if(a as Data){
			Expire e;
			e.type = 6u;
			e.value = a.value;
			e.parent = a.parent;
			e.child = a.child;
			return e;
		}else if(a as Function){
			Expire e;
			e.type = 7u;
			e.value = a.value;
			e.parent = a.parent;
			e.child = a.child;
			return e;
		}
		Res r;
		return r;
	}

	//there remains a chance that an atom in the leftmost position
	//of its parenthetical can react with a child atom more than once
	//in error if it wasn't expired quickly enough. Either disallow
	//more than 2 data members in a parenthetical, reach solution by
	//quorum, or find a way to track the last child reacted-with
	//(using the child's child as an identifier)
	//Aggressive expire behavior mitigates this pretty well.

	virtual Bool collapse(SiteNum cSlot, SiteNum pSlot){
		Atom p = ew[pSlot];
		Atom c = ew[cSlot];
		Bool collapsed = false;
		if(cSlot > 0){
			if(pSlot > 0){
				//can see both
				if(p as OpenParenth){
					if(c as CloseParenth){
						if(checkEvalStatus()){
							evalOParenth(p.child,p.parent,pSlot);
							evalCParenth(c.child, parent, cSlot, c.evolution);

				//potentially dangerous. 
				//may expire before eval

							expireParent(p);
							expireChild(c);
							expireSelf();

							collapsed = true;
						}
					}else{
						if(operateOnChild(c,cSlot)){
							expireChild(c);
							expireSelf();
							collapsed = true;
						}
					}
				}
			}
		}
		return collapsed;
	}
	Atom changeType(Atom a, Int val, ID p, ID c){
		Atom n;
		n = au.new(au.getType(a));
		if(n as OpenParenth){
			n.value = val;
			n.parent = p;
			n.child = c;
			return n;
		}else if(n as CloseParenth){
			n.parent = p;
			n.child = c;
			return n;
		}else if(n as Add){
			n.value = val;
			n.parent = p;
			n.child = c;
			return n;
		}else if(n as Subtract){
			n.value = val;
			n.parent = p;
			n.child = c;
			return n;
		}else if(n as Divide){
			n.value = val;
			n.parent = p;
			n.child = c;
			return n;
		}else if(n as Multiply){
			n.value = val;
			n.parent = p;
			n.child = c;
			return n;
		}else{
			Atom a;
			return a;
		}
	}
	Void die(){
		Res r;
		ew[0] = r;
	}
}
