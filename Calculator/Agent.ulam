quark Agent{
	EventWindow ew;
	AtomUtils au;
	Random r;
	Cluster cl;
	DebugUtils du;
	DregResUtils dru;

	typedef Unsigned(15) ID;
	typedef EventWindow.SiteNum SiteNum;
	typedef AtomUtils.Type Type;
	
	ID parent;
	ID child;

	Void clusterDiffuse(){
		agentCluster();
		if(numCopiesNearMe() < 2u){
			copySelf();
		}else if(lowrescount()){
			die();
		}
	}
	Bool lowrescount(){
		Unsigned rescount;
		for(SiteNum i = 1; i < 41; ++i){
			Atom a = ew[i];
			if(a as Res){
				++rescount;
			}
		}
		if(rescount < 7u){
			return true;
		}else return false;
	}
	virtual Unsigned numCopiesNearMe();
	virtual Atom me();
	virtual Int getValue();
	Void copySelf(){
			SiteNum slot = dru.resSlotNearMe();
			Atom a = me();
			if(slot > 0){
				ew[slot] = a;
			}
	}
	Void agentCluster(){
		for(SiteNum i = 1; i < 41; ++i){
			Atom a = ew[i];
			if(a as Agent){
				SiteNum slot = cl.emptySlotNearMe();
//				if(r.oneIn(10)){
					ew.swap(slot,i);
//				}
			}
		}
	}
	Void diffuse(){
		SiteNum slot = cl.emptySlotNearMe();
		ew.swap(0,slot);
	}
	SiteNum findChild(){
		for(SiteNum i = 1; i <41; ++i){
			Atom a = ew[i];
			if(a as Agent){
				Atom b = ew[i];
				if(b as Data){
					if(self as Function){
						if(a.parent == child){
							return i;
						}
					}
				}else if(a.parent == child){
					return i;
				}
			}
		}
		return 0;
	}
	SiteNum findParent(){
		for(SiteNum i = 1; i <41; ++i){
			Atom a = ew[i];
			if(a as Agent){
				if(a.child == parent){
					return i;
				}
			}
		}
		return 0;
	}
	virtual Int typeFunction(Atom a);
	virtual Void overwrite(Int val, ID p, ID c, SiteNum slot);


	Void evalOParenth(ID c, ID p, SiteNum slot){
		OpenParenth op;
		op.value = getValue();
		op.parent = p;
		op.child = c;
		op.evaluated = true;
		ew[slot] = op;
	}
	Void evalCParenth(ID c, ID p, SiteNum slot, Unsigned evolution){
		CloseParenth cp;
		++evolution;
		cp.evolution = evolution;
		cp.child = c;
		cp.parent = p;
		ew[slot] = cp;


	}

	Void expireChild(Atom c){
		//expire child
		Atom exC = expire(c);
		SiteNum exCSlot = dru.resSlotNearMe();
		if(exCSlot > 0){
			ew[exCSlot] = exC;
		}
		
	}

	Void expireParent(Atom p){
		Atom exP = expire(p);
		SiteNum exPSlot = dru.resSlotNearMe();
		if(exPSlot > 0){
			ew[exPSlot] = exP;
		}
		
	}

	Void expireSelf(){
		Atom e = expire(me());
		ew[0] = e;
	}

	Void operateOnChild(Atom c,SiteNum cSlot){
		Int val = typeFunction(c);
		if(c as Agent){
			overwrite(val,parent,c.child,cSlot);
		}
	}
	Atom expire(Atom a){
		if(a as Add){
			Expire e;
			e.type = 1u;
			e.value = a.value;
			e.parent = a.parent;
			e.child = a.child;
			return e;
		}else if(a as Subtract){
			Expire e;
			e.type = 2u;
			e.value = a.value;
			e.parent = a.parent;
			e.child = a.child;
			return e;
		}else if(a as Divide){
			Expire e;
			e.type = 3u;
			e.value = a.value;
			e.parent = a.parent;
			e.child = a.child;
			return e;
		}else if(a as OpenParenth){
			Expire e;
			e.type = 4u;
			e.value = a.value;
			e.parent = a.parent;
			e.child = a.child;
			return e;
		}else if(a as CloseParenth){
			Expire e;
			e.type = 5u;
			e.parent = a.parent;
			e.child = a.child;
			return e;
		}else if(a as Data){
			Expire e;
			e.type = 6u;
			e.value = a.value;
			e.parent = a.parent;
			e.child = a.child;
			return e;
		}else if(a as Function){
			Expire e;
			e.type = 7u;
			e.value = a.value;
			e.parent = a.parent;
			e.child = a.child;
			return e;
		}
		Res r;
		return r;
	}
	virtual Bool checkEvalStatus();
	virtual Bool collapse(SiteNum cSlot, SiteNum pSlot){
		Atom p = ew[pSlot];
		Atom c = ew[cSlot];
		Bool collapsed = false;
		if(cSlot > 0){
			if(pSlot > 0){
				//can see both
				if(p as OpenParenth){
					if(c as CloseParenth){
						if(checkEvalStatus()){
							evalOParenth(p.child,p.parent,pSlot);
							evalCParenth(c.child, parent, cSlot, c.evolution);

							expireParent(p);
							expireChild(c);

							expireSelf();
							collapsed = true;
						}
					}else if(c as OpenParenth){
						//no nothing
					}else if(c as Function){

					}else{
						operateOnChild(c,cSlot);
						expireChild(c);

						expireSelf();
						collapsed = true;
					}
				}
			}
		}
		return collapsed;
	}
	Atom changeType(Atom a, Int val, ID p, ID c){
		Atom n;
		n = au.new(au.getType(a));
		if(n as OpenParenth){
			n.value = val;
			n.parent = p;
			n.child = c;
			return n;
		}else if(n as CloseParenth){
			n.parent = p;
			n.child = c;
			return n;
		}else if(n as Add){
			n.value = val;
			n.parent = p;
			n.child = c;
			return n;
		}else if(n as Subtract){
			n.value = val;
			n.parent = p;
			n.child = c;
			return n;
		}else if(n as Divide){
			n.value = val;
			n.parent = p;
			n.child = c;
			return n;
		}else{
			Atom a;
			return a;
		}
	}
	Void die(){
		Res r;
		ew[0] = r;
	}
}
