/**
	\author Spencer Harmon
	\license lgpl
	\symbol Da
	\color #40f
	\symmetries all
	
 */
element Data : Agent{
	Int value;


	typedef EventWindow.SiteNum SiteNum;

	Bool noCopiesNearMe(){
		for(SiteNum i = 1; i < 41; ++i){
			Atom a = ew[i];
			if(a as Data){
				if(a.child == child && a.parent == parent && a.value == value){
					return false;
				}
			}
		}
		return true;
	}
	Atom me(){
		return self;
	}
	Int typeFunction(Atom a){
		Int ret;
		return ret;
	}
	Int typeFunction(Atom a, Atom b){
		Int notvirtual;
		return notvirtual;
	}
	Atom evaluateParenthesis(ID n, ID a){
		Empty e;
		return e;
	}
	Void overwrite(Int i, ID p, ID c, SiteNum s1, SiteNum s2){
		Bool virt = false;
	}
	Void overwrite(Int i, ID p, ID c, SiteNum s1){
		Bool virt = false;
	}
	Bool mimic(){
		Bool changed;
		for(SiteNum i = 1; i < 41; ++i){
			Atom a = ew[i];
			if(a as Add){
				if(a.child == child && a.parent == parent){
					changed = true;
					ew[0] = a;
				}
			}else if(a as Subtract){
				if(a.child == child && a.parent == parent){
					changed = true;
					ew[0] = a;
				}
			}else if(a as Divide){
				if(a.child == child && a.parent == parent){
					changed = true;
					ew[0] = a;
				}
			}
		}
		return changed;
	}

	Void behave(){
		if(!mimic()){
			clusterDiffuse();
		}
	}
}
