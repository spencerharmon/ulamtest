/**
	\author Spencer Harmon
	\license lgpl
	\symbol Fn
	\color #82d
	\symmetries all
	
 */
element Function : Agent{

	Int value;
	Bool dieRandomly;

	typedef EventWindow.SiteNum SiteNum;

	Bool checkEvalStatus(){
		return false;
	}
	Int getValue(){
		return value;
	}
	Unsigned numCopiesNearMe(){
		Unsigned num;
		for(SiteNum i = 1; i < 41; ++i){
			Atom a = ew[i];
			if(a as Function){
				if(a.child == child && a.parent == parent && a.value == value){
					++num;
				}
			}
		}
		return num;
	}
	Atom me(){
		return self;
	}
	Int typeFunction(Atom a){
		Int ret;
		return ret;
	}
	Int typeFunction(Atom a, Atom b){
		Int notvirtual;
		return notvirtual;
	}
	Atom getEvaluatedAgent(ID n, ID a){
		Empty e;
		return e;
	}
	Void overwrite(Int i, ID p, ID c, SiteNum s1){
		Bool virt = false;
	}
	Void expireCopy(){
		//Function atoms cannot expire themselves like most agents when propogating functions to data since they need to preserve the parent and update themselves and the child.
		//i.e. function expire behavior, unlike other agents, necessitates the creation of an additional atom; it must consume a resource.
		//therefore, Function has its own expire behavior, and does not utilize the expire atom except when its child is a closeparenth, when it must expire like a standard agent.
		Function c;
		c.child = child;
		c.parent = parent;