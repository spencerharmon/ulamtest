/**
	\author Spencer Harmon
	\license lgpl
	\symbol Fn
	\color #82d
	\symmetries all
	
 */
element Function : Agent{

	Int value;
	Bool dieRandomly;

	typedef EventWindow.SiteNum SiteNum;

	Bool checkEvalStatus(){
		return false;
	}
	Int getValue(){
		return value;
	}
	Unsigned numCopiesNearMe(){
		Unsigned num;
		for(SiteNum i = 1; i < 41; ++i){
			Atom a = ew[i];
			if(a as Function){
				if(a.child == child && a.parent == parent && a.value == value){
					++num;
				}
			}
		}
		return num;
	}
	Atom me(){
		return self;
	}
	Int typeFunction(Atom a){
		Int ret;
		return ret;
	}
	Int typeFunction(Atom a, Atom b){
		Int notvirtual;
		return notvirtual;
	}
	Bool overwrite(Int i, ID p, ID c, SiteNum s1){
		Bool virt = false;
		return false;
	}
	Bool expireCopy(){
		//Function atoms cannot expire themselves like most agents when propogating functions to data since they need to preserve the parent and update themselves and the child.
		//i.e. function expire behavior, unlike other agents, necessitates the creation of an additional atom; it must consume a resource.
		//therefore, Function has its own expire behavior, and does not utilize the expire atom except when its child is a closeparenth, when it must expire like a standard agent.

		Function c;
		c.child = child;
		c.parent = parent;
		c.dieRandomly = true;
		c.value = value;

		Bool copied = false;
		SiteNum resStor;
		for(SiteNum i = 1; i < 41; ++i){
			Atom a = ew[i];
			//try to use either copies of ourselves or res
			if(a as Function){
				if(a.parent == parent && a.child == child){
					copied = true;
					ew[i] = c;
				}
			}else if(a as Res){
				copied = true;
				resStor = i;
			}
			if(i == 40 && copied == false && resStor > 0){
				copied = true;
				ew[resStor] = c;				
			}
		}
		//here, !dieRandomly is a standin for "I'm creating a unique atom and must sacrifice empty space because there's nothing else I can use safely"
		if(!dieRandomly && !copied){
			// otherwise, violate dreg/res and use empty space.
			SiteNum slot = cl.emptySlotNearMe();
			ew[slot] = c;
			copied = true;
		}else{
			clusterDiffuse();
		}
		return copied;
	}
	Bool propogateType(SiteNum cSlot){
		Bool collapsed = false;
		Atom c = ew[cSlot];
		if(c as CloseParenth){
			evalCParenth(c.child, parent, cSlot, c.evolution);
			//double check eval
			Atom new = ew[cSlot];
			if(new as CloseParenth){
				if(new.evolution > c.evolution){
					expireSelf();
					expireChild(c);
					collapsed = true;
				}
			}
		}else if(c as Data){
			Function fn;
			fn.value = value;
			fn.child = c.child;
			fn.parent = c.parent;
			
			Atom oper = getOperator(c);
			ew[cSlot] = oper;
			//ew[0] taken
			expireAgent(self);
			expireChild(c);

			ew[0] = fn;
			collapsed = true;
		}
		return collapsed;
	}
	Atom getOperator(Data c){
		if(value == 1){
			Add ad;
			ad.parent = parent;
			ad.child = child;
			ad.value = c.value;
			return ad;
		}else if(value == 2){
			Subtract sb;
			sb.parent = parent;
			sb.child = child;
			sb.value = c.value;
			return sb;
		}else if(value == 3){
			Divide dv;
			dv.parent = parent;
			dv.child = child;
			dv.value = c.value;
			return dv;
		}
		//gcc non-void-function warning
		Res r;
		return r;
	}
	Void behave(){
		SiteNum cSlot = findChild();
		if(cSlot > 0){
			if(!propogateType(cSlot)){
				clusterDiffuse();
			}
		}else{
			clusterDiffuse();
		}
	}
}
