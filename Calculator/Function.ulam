/**
	\author Spencer Harmon
	\license lgpl
	\symbol Fn
	\color #82d
	\symmetries all
	
 */
element Function : Agent{

	Int value;

	typedef EventWindow.SiteNum SiteNum;

	Bool checkEvalStatus(){
		return false;
	}
	Int getValue(){
		return value;
	}
	Unsigned numCopiesNearMe(){
		Unsigned num;
		for(SiteNum i = 1; i < 41; ++i){
			Atom a = ew[i];
			if(a as Function){
				if(a.child == child && a.parent == parent && a.value == value){
					++num;
				}
			}
		}
		return num;
	}
	Atom me(){
		return self;
	}
	Int typeFunction(Atom a){
		Int ret;
		return ret;
	}
	Int typeFunction(Atom a, Atom b){
		Int notvirtual;
		return notvirtual;
	}
	Bool overwrite(Int i, ID p, ID c, SiteNum s1){
		Bool virt = false;
		return false;
	}
	Bool propogateType(SiteNum cSlot){
		Bool collapsed = false;
		Atom c = ew[cSlot];
		if(c as CloseParenth){
			if(!c.preventFunctionShift){
				evalCParenth(c.child, parent, cSlot, c.evolution);
				//double check eval
				expireSelf();
				expireChild(c);
				collapsed = true;
			}
		}else if(c as Data){
			Function fn;
			fn.value = value;
			fn.child = c.child;
			fn.parent = c.parent;
			
			Atom oper = getOperator(c);
			ew[cSlot] = oper;
			//ew[0] taken
			expireAgent(self);
			expireChild(c);

			ew[0] = fn;
			collapsed = true;
		}
		return collapsed;
	}
	Atom getOperator(Data c){
		if(value == 1u){
			Add ad;
			ad.parent = parent;
			ad.child = child;
			ad.value = c.value;
			return ad;
		}else if(value == 2u){
			Subtract sb;
			sb.parent = parent;
			sb.child = child;
			sb.value = c.value;
			return sb;
		}else if(value == 3u){
			Divide dv;
			dv.parent = parent;
			dv.child = child;
			dv.value = c.value;
			return dv;
		}
		//gcc non-void-function warning
		Res r;
		return r;
	}
	Void behave(){
		SiteNum cSlot = findChild();
		if(cSlot > 0){
			if(!propogateType(cSlot)){
				clusterDiffuse();
			}
		}else{
			clusterDiffuse();
		}
	}
}
