element Emitter{
	DebugUtils du;
	Random r;
	Cluster cl;
	EventWindow ew;
	DregResUtils dru;
	
	typedef Agent.ID ID;
	typedef EventWindow.SiteNum SiteNum;

	ID idStor;
	Unsigned agentIndex;
	Bool finished;

	ID openParenth(SiteNum slot, ID id){
		OpenParenth a;
		a.parent = id;

		ID aID = genID();
		a.child = aID;
		
		ew[slot] = a;

		du.print(a);
		return aID;
	}

	ID closeParenth(SiteNum slot, ID id){
		CloseParenth a;
		a.parent = id;

		ID aID = genID();
		a.child = aID;
		
		ew[slot] = a;

		du.print(a);
		return aID;
	}

	ID add(SiteNum slot, ID id, Int val){
		Add a;
		a.value = val;
		a.parent = id;

		ID aID = genID();
		a.child = aID;
		
		ew[slot] = a;

		du.print(a);
		return aID;
	}

	ID subtract(SiteNum slot, ID id, Int val){
		Subtract s;
		s.value = val;
		s.parent = id;

		ID sID = genID();
		s.child = sID;
		
		ew[slot] = s;

		du.print(s);
		return sID;
	}

	ID function(SiteNum slot, ID id, Int val){
		Function f;
		f.value = val;
		f.parent = id;

		ID fID = genID();
		f.child = fID;
		
		ew[slot] = f;

		du.print(f);
		return fID;
	}
	
	ID data(SiteNum slot, ID id, Int val){
		Data d;
		d.value = val;
		d.parent = id;

		ID dID = genID();
		d.child = dID;
		
		ew[slot] = d;

		du.print(d);
		return dID;
	}
	

	Void subtracttest(){

		ID nextid = idStor;
		SiteNum slot = cl.emptySlotNearMe();
		while(slot > 0){
			++agentIndex;
			if(agentIndex == 1u){
				nextid = openParenth(slot, nextid);
			}else if(agentIndex == 2u){
				nextid = function(slot, nextid, 2);
			}else if(agentIndex == 3u){
				nextid = data(slot, nextid, 4);
			}else if(agentIndex == 4u){
				nextid = data(slot, nextid, 3);
			}else if(agentIndex == 5u){
				nextid = closeParenth(slot, nextid);
			}else{
				return;
			}

			slot = cl.emptySlotNearMe();
		}
		idStor = nextid;
	}
	Void shorteqTest(){
		// (- 10 (/ 600 100)) = 4
		ID nextid = idStor;
		SiteNum slot = dru.resSlotNearMe();
		while(slot > 0){
			++agentIndex;
			if(agentIndex == 1u){
				nextid = openParenth(slot, nextid);
			}else if(agentIndex == 2u){
				//2 is for subtract
				Int i = 2;
				nextid = function(slot, nextid, i);
			}else if(agentIndex == 3u){
				nextid = data(slot, nextid, 10);
			}else if(agentIndex == 4u){
				nextid = openParenth(slot, nextid);
			}else if(agentIndex == 5u){
				//3 is for divide
				Int i = 3;
				nextid = function(slot, nextid, i);
			}else if(agentIndex == 6u){
				nextid = data(slot, nextid, 600);
			}else if(agentIndex == 7u){
				nextid = data(slot, nextid, 100);
			}else if(agentIndex == 8u){
				nextid = closeParenth(slot, nextid);
			}else if(agentIndex == 9u){
				nextid = closeParenth(slot, nextid);
			}else{
				finished = true;
				return;
			}

			slot = dru.resSlotNearMe();
		}
		idStor = nextid;

	}
	Void spawnEquation(){
		// (/ 600 (- (+ 2 3 3) 2)) = 100
		ID nextid = idStor;
		SiteNum slot = dru.resSlotNearMe();
		while(slot > 0){
			++agentIndex;
			if(agentIndex == 1u){
				nextid = openParenth(slot, nextid);
			}else if(agentIndex == 2u){
				//3 is for divide
				Int i = 3;
				nextid = function(slot, nextid, i);
			}else if(agentIndex == 3u){
				nextid = data(slot, nextid, 600);
			}else if(agentIndex == 4u){
				nextid = openParenth(slot, nextid);
			}else if(agentIndex == 5u){
				//2 is for subtract
				Int i = 2;
				nextid = function(slot, nextid, i);
			}else if(agentIndex == 6u){
				nextid = openParenth(slot, nextid);
			}else if(agentIndex == 7u){
				//1 is for add
				Int i = 1;
				nextid = function(slot, nextid, i);
			}else if(agentIndex == 8u){
				nextid = data(slot, nextid, 2);
			}else if (agentIndex == 9u){
				nextid = data(slot, nextid, 3);
			}else if (agentIndex == 10u){
				nextid = data(slot, nextid, 3);
			}else if(agentIndex == 11u){
				nextid = closeParenth(slot, nextid);
			}else if(agentIndex == 12u){
				nextid = data(slot, nextid, 2);
			}else if(agentIndex == 13u){
				nextid = closeParenth(slot, nextid);
			}else if(agentIndex == 14u){
				nextid = closeParenth(slot, nextid);
			}else{
				finished = true;
				return;
			}

			slot = dru.resSlotNearMe();
		}
		idStor = nextid;
	}

	ID genID(){
		ID ret = (ID)r.create(ret.maxof);
		return ret;
	}
	Void behave(){
//	subtracttest();
//	shorteqTest();
	spawnEquation();
	}
}
