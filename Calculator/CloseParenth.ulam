/**
	\author Spencer Harmon
	\license lgpl
	\symbol Cp
	\symmetries all
	\#555
	
 */
element CloseParenth : Agent{

	Unsigned evolution;
	Bool preventFunctionShift = false;

	typedef EventWindow.SiteNum SiteNum;

	Bool checkEvalStatus(){
		return false;
	}
	Int getValue(){
		Int dontuse;
		return dontuse;
	}
	Unsigned numCopiesNearMe(){
		Unsigned num;
		for(SiteNum i = 1; i < 41; ++i){
			Atom a = ew[i];
			if(a as CloseParenth){
				if(a.child == child && a.parent == parent){
					++num;
				}
			}
		}
		return num;
	}
	Atom me(){
		return self;
	}
	Int typeFunction(Atom a){
		Int ret;
		return ret;
	}
	Int typeFunction(Atom a, Atom b){
		Int notvirtual;
		return notvirtual;
	}
	Atom getEvaluatedAgent(ID n, ID a){
		Empty e;
		return e;
	}
	Bool overwrite(Int i, ID p, ID c, SiteNum s1){
		Bool virt = false;
		return false;
	}
	//not very expressive, but since the equation evaluates from 
	//left to right, CloseParenth is passive. Scanning for later 
	//evloutions of our type, CloseParenth can begin the expire 
	//process for its clones. 
	Bool detectExp(){
		Bool ret = false;
		//we'll expire as many CloseParenth as we can up 
		//to the maximum available bits. After that, 
		//it'll have to be some other process or not 
		//happen at all
		if(evolution != evolution.maxof){
			for(SiteNum i; i < 41; ++i){
				Atom a = ew[i];
	
				if(a as CloseParenth){
					//CloseParenth retains its child until
					//expired by function for its parenthetical
					//By comparing child IDs, we only expire for
					//evolutions within our parenthetical.
					if(a.child == child){
						if(a.evolution > evolution){
							Atom exp = expire(self);
							ew[0] = exp;
							ret = true;
						}
					}
				}
			}
		}
		return ret;
	}
	Void behave(){
		if(!detectExp()){
			clusterDiffuse();
		}
	}
}
