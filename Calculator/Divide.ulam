/**
	\author Spencer Harmon
	\license lgpl
	\symbol Dv
	\symmetries all
	\color #052
	
 */
element Divide : Agent{
	Int value;

	typedef EventWindow.SiteNum SiteNum;

	Atom me(){
		Divide d;
		d.parent = parent;
		d.child = child;
		d.value = value;
		return d.atomof;
	}	
	Int typeFunction(Atom c){
		Int ret;
		if(c as Divide){
			ret = value / c.value;
		}
		return ret;
	}
	Atom evaluateParenthesis(ID c, ID p){
		OpenParenth op;
		op.value = value;
		op.parent = p;
		op.child = c;
		return op;
	}
	Void overwrite(Int val, ID p, ID c, SiteNum slot){
		Atom a = ew[slot];
		if(a as Divide){
			Divide d;
			d.value = val;
			d.parent = p;
			d.child = c;

			ew[slot] = d.atomof;
			ew[0] = d.atomof;
		}
	}
	Void overwrite(Int val, ID p, ID c, SiteNum cSlot, SiteNum pSlot){
		Atom a = ew[cSlot];
		if(a as Divide){
			Divide d;
			d.value = val;
			d.parent = p;
			d.child = c;

			ew[cSlot] = d.atomof;
			ew[pSlot] = d.atomof;
			ew[0] = d.atomof;
		}
	}

	Void behave(){
		SiteNum cSlot = findChild();
		SiteNum pSlot = findParent();
		collapse(cSlot,pSlot);
		clusterDiffuse();
	}
}
