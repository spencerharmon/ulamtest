/**
	\author Spencer Harmon
	\license lgpl
	\symbol Op
	\color #000
	\symmetries all
	
 */
element OpenParenth : Agent{

	typedef Agent.ID ID;
	typedef EventWindow.SiteNum SiteNum;

	Int value;

	Atom me(){
		OpenParenth o;
		o.parent = parent;
		o.child = child;
		o.value = value;
		return o.atomof;
	}	
	Int typeFunction(Atom a){
		Int notvirtual;
		return notvirtual;
	}
	Int typeFunction(Atom a, Atom b){
		Int notvirtual;
		return notvirtual;
	}
	Void overwrite(Int i, ID p, ID c, SiteNum s1, SiteNum s2){
		Bool virt = false;
	}
	Void overwrite(Int i, ID p, ID c, SiteNum s1){
		Bool virt = false;
	}
	Atom evaluateParenthesis(ID n, ID a){
		Empty e;
		return e;
	}
	Void collapse(SiteNum cSlot, SiteNum pSlot){
		if(parent == 0){
			if(cSlot > 0){
				Atom a = ew[cSlot];
				if(a as CloseParenth){
					du.print(value);
				}
			}
		}

		Atom c = ew[cSlot];
		Atom p = ew[pSlot];

		if(cSlot > 0 && pSlot > 0){
			if(c as CloseParenth){
				ID idChi = c.child;
				//value set by child in default agent collapse behavior
				Data d;
				d.value = value;
				d.parent = parent;
				d.child = c.child;
				ew[cSlot] = d;
			
			}
		}
	}
	Void behave(){
		SiteNum cSlot = findChild();
		SiteNum pSlot = findParent();
		collapse(cSlot,pSlot);
		clusterDiffuse();
	}
}
