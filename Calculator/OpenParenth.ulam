/**
	\author Spencer Harmon
	\license lgpl
	\symbol Op
	\color #000
	\symmetries all
	
 */
element OpenParenth : Agent{

	typedef Agent.ID ID;
	typedef EventWindow.SiteNum SiteNum;

	Int value;
	Bool evaluated;

	Bool checkEvalStatus(){
		return evaluated;
	}
	Bool noCopiesNearMe(){
		for(SiteNum i = 1; i < 41; ++i){
			Atom a = ew[i];
			if(a as OpenParenth){
				if(a.child == child && a.parent == parent && a.value == value){
					return false;
				}
			}
		}
		return true;
	}
	Atom me(){
		return self;
	}	
	Int typeFunction(Atom a){
		Int notvirtual;
		return notvirtual;
	}
	Int typeFunction(Atom a, Atom b){
		Int notvirtual;
		return notvirtual;
	}
	Void overwrite(Int i, ID p, ID c, SiteNum s1, SiteNum s2){
		Bool virt = false;
	}
	Void overwrite(Int i, ID p, ID c, SiteNum s1){
		Bool virt = false;
	}
	Atom evaluateParenthesis(ID n, ID a){
		Empty e;
		return e;
	}
	Bool collapse(SiteNum cSlot, SiteNum pSlot){
		if(parent == 0){
			Atom a = ew[cSlot];
			if(a as CloseParenth){
				if(evaluated){
					du.print(value);
				}
			}
		}
		Bool collapsed = false;
		if(cSlot > 0 && pSlot > 0){
			Atom c = ew[cSlot];
			Atom p = ew[pSlot];
			if(c as CloseParenth){
				if(evaluated){
					collapsed = true;
					ID idChi = c.child;
					//value set by child in default agent collapse behavior
					Data d;
					d.value = value;
					d.parent = parent;
					d.child = c.child;
					ew[cSlot] = d;
					ew[0] = d;
				}
			}
		}
		return collapsed;
	}
	Void behave(){
		SiteNum cSlot = findChild();
		SiteNum pSlot = findParent();

		//can't change ew[0] and move; stale reference
		if(!collapse(cSlot,pSlot)){
			clusterDiffuse();
		}
	}
}
