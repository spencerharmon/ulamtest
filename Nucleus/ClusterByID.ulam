ulam 2;
use AtomUtils;
//use SiteVisitor;
use WindowScanner;
use C2D;
use OutOfBounds;

/**
	ClusterByID allows an atom to search, first for a given target atom (Nucleus), then for other atoms clustering it (Genes) by
	identifying a 10-bit ID shared by the Nucleus and Genes.
	
	\symmetries all
	\author Spencer Harmon;
	\license lgpl;
 */
quark ClusterByID {
	EventWindow ew;
	AtomUtils au;
	Cell cell;
	DebugUtils du;

	//inherited typdefs
	typedef AtomUtils.Type ElementType;
	typedef EventWindow.SiteNum SiteNum;
	typedef WindowScanner.Radius Radius;
	typedef C2D.Coord Coord;
	typedef WindowScanner.Category Category;

	typedef Cell.ID ID;

	SiteNum findNonCellSlotNear(SiteNum t,ID id){
		return findNonCellSlotNear(ew.getCoord(t),id);
	}

	SiteNum findNonCellSlotNear(C2D t,ID id){
		OutOfBounds ob;
		C2D cd;
		C2D tprime;

		SiteNum target = 0;

		//scan the area around t
		for(Int x = t.x-1; x <= t.x+1; ++x){
			for(Int y = t.y-1; y <= t.y+1; ++y){
				tprime = cd.make((Int(16)) x,(Int(16)) y);
				if(!ob.isOOB(tprime)){
					Atom a = ew[ew.getSiteNumberRaw(tprime)];
					if(cell.outOfTheCell(a,id)){
						target = ew.getSiteNumberRaw(tprime);
						return target;
					}
				}
			}
		}
		//possibly, we haven't returned anything yet, but if thats the case, target should still be 0
		return target;
	}

	SiteNum nonCellSlotNearMe(ID id){
		Gene gene;
		Unsigned radius = ew.getRadius();
		SiteNum s = nonCellSlotNearMe(gene, id, radius);
		return s;
	}

	SiteNum nonCellSlotNearMe(Atom atom, ID id, Unsigned radius){
		SiteVisitorByID sv;
		WindowScanner ws;
		
		ws.resetCategories();
		Category cGene = ws.allocateCategory();
		
		ElementType tGene = au.getValidType(atom);
		
		sv.setType(cGene,tGene);
		sv.setID(cGene,id);
		sv.invert(cGene);

		//only scan next radius if no hits
		ws.scan(sv,1,1);
		if(ws.getHits(cGene)==(Unsigned)0 && radius > 1u){
			ws.scan(sv,2,2);
			if(ws.getHits(cGene)==(Unsigned)0 && radius > 2u){
				ws.scan(sv,3,3);
				if(ws.getHits(cGene)==(Unsigned)0 && radius > 3u){
					ws.scan(sv,4,4);
					if(ws.getHits(cGene) <= (Unsigned)40){
						return ws.getSiteNum(cGene);
					}
					else{
						return 0;
					}
				}
				if(ws.getHits(cGene) <= (Unsigned)40){
					return ws.getSiteNum(cGene);
				}
				else{
					return 0;
				}
			}
			if(ws.getHits(cGene) <= (Unsigned)40){
				return ws.getSiteNum(cGene);
			}
			else{
				return 0;
			}
		}
		if(ws.getHits(cGene) <= (Unsigned)40){
			return ws.getSiteNum(cGene);
		}
		else{
			return 0;
		}
	}
	SiteNum emptySlotNearMe(){
		Unsigned radius = ew.getRadius();
		SiteVisitorByID sv;
		WindowScanner ws;
		
		ws.resetCategories();
		Category cEmpty = ws.allocateCategory();
		
		ElementType tEmpty = au.getEmptyType();
		
		sv.setType(cEmpty,tEmpty);

		//only scan next radius if no hits
		ws.scan(sv,1,1);
		if(ws.getHits(cEmpty)==(Unsigned)0 && radius > 1u){
			ws.scan(sv,2,2);
			if(ws.getHits(cEmpty)==(Unsigned)0 && radius > 2u){
				ws.scan(sv,3,3);
				if(ws.getHits(cEmpty)==(Unsigned)0 && radius > 3u){
					ws.scan(sv,4,4);
					if(ws.getHits(cEmpty) <= (Unsigned)40){
						return ws.getSiteNum(cEmpty);
					}
					else{
						return 0;
					}
				}
				if(ws.getHits(cEmpty) <= (Unsigned)40){
					return ws.getSiteNum(cEmpty);
				}
				else{
					return 0;
				}
			}
			if(ws.getHits(cEmpty) <= (Unsigned)40){
				return ws.getSiteNum(cEmpty);
			}
			else{
				return 0;
			}
		}
		if(ws.getHits(cEmpty) <= (Unsigned)40){
			return ws.getSiteNum(cEmpty);
		}else{
			return 0;
		}
	}

	Bool bringGenesCloser(ID id, Atom me){
		Bool foundGene = false;
		if(me as Nucleus){
			for(SiteNum i = 1; i <= 40;++i){
				Atom a = ew[i];
				if(a as Gene){
					if(a.id == id){
					//	SiteNum e = nonCellSlotNearMe(id);
						SiteNum e = emptySlotNearMe();
						ew.swap(i,e);
					}
				}
			}
		}
		if(me as Gene){
			Bool canSeeNucleus = me.canSeeNucleus;
			for(SiteNum i = 1; i <= 40;++i){
				Atom a = ew[i];
				if(a as Gene){
					if(a.id == id){
						foundGene = true;
						if(canSeeNucleus && !a.canSeeNucleus){
						//	SiteNum e = findNonCellSlotNear(i,id);
							//this should avoid moving other genes/nuclei
							SiteNum e = emptySlotNearMe();
							ew.swap(i,e);
						}
						if(!canSeeNucleus && a.canSeeNucleus){
						//	SiteNum e = findNonCellSlotNear(i,id);
							SiteNum e = emptySlotNearMe();
							ew.swap(0,e);
						}
					}
				}
			}
		}
		return foundGene;
	}
	
	Bool geneCanSeeNucleus(ID id){
		SiteVisitorByID sv;
		WindowScanner ws;
		
		ws.resetCategories();
		Category cNucleus = ws.allocateCategory();
		Nucleus aNucleus;
		ElementType tNucleus = au.getValidType(aNucleus);
		
		sv.setType(cNucleus,tNucleus);
		sv.setID(cNucleus,id);

		ws.scan(sv);

		if(ws.getHits(cNucleus)>(Unsigned)0){
			return true;
		}
		else{
			return false;
		}
	}
	Void run(){
		ew.swap(0,40);
	}
}//Cluster namespace
