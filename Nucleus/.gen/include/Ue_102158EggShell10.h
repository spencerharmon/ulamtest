/**                                      -*- mode:C++ -*- */

/***********************         DO NOT EDIT        ******************************
*
* EggShell.h - Element header for ULAM //gcnl:SymbolClass.cpp:750
*
**********************************************************************************
* This code is generated by the ULAM programming language compilation system.
*
* The ULAM programming language compilation system is free software:
* you can redistribute it and/or modify it under the terms of the GNU
* General Public License as published by the Free Software
* Foundation, either version 3 of the License, or (at your option)
* any later version.
*
* The ULAM programming language compilation system is distributed in
* the hope that it will be useful, but WITHOUT ANY WARRANTY; without
* even the implied warranty of MERCHANTABILITY or FITNESS FOR A
* PARTICULAR PURPOSE.  See the GNU General Public License for more
* details.
*
* You should have received a copy of the GNU General Public License
* along with the ULAM programming language compilation system
* software.  If not, see <http://www.gnu.org/licenses/>.
*
* @license GPL-3.0+ <http://spdx.org/licenses/GPL-3.0+>
*/

#ifndef UE_102158EGGSHELL10_H
#define UE_102158EGGSHELL10_H

#include "UlamDefs.h"
#include "Ue_102158EggShell10_Types.h"
//Forward Defs of other classes: //gcnl:SymbolTableOfClasses.cpp:576
namespace MFM { template <class EC> struct Uq_10106UrSelf10; }  //FORWARD
namespace MFM { template <class EC> struct Ue_10106Primer10; }  //FORWARD
namespace MFM { template <class EC> struct Uq_10106Random10; }  //FORWARD
namespace MFM { template <class EC> struct Uq_10109211EventWindow10; }  //FORWARD
namespace MFM { template <class EC> struct Uq_10104Cell10; }  //FORWARD
namespace MFM { template <class EC> struct Uq_10109212DecisionTree10; }  //FORWARD
namespace MFM { template <class EC> struct Ue_102564Gene10; }  //FORWARD
namespace MFM { template <class EC> struct Ue_10105Empty10; }  //FORWARD
namespace MFM { template <class EC> struct Uq_1010919AtomUtils10; }  //FORWARD
namespace MFM { template <class EC> struct Uq_10104Fail10; }  //FORWARD
namespace MFM { template <class EC> struct Uq_10105MDist10; }  //FORWARD
namespace MFM { template <class EC> struct Uq_102323C2D10; }  //FORWARD
namespace MFM { template <class EC> struct Uq_10109210ColorUtils10; }  //FORWARD
namespace MFM { template <class EC> struct Ue_102717Nucleus10; }  //FORWARD
namespace MFM { template <class EC> struct Un_10412489213WindowScanner10; }  //FORWARD
namespace MFM { template <class EC> struct Uq_10109211ClusterByID10; }  //FORWARD
namespace MFM { template <class EC> struct Uq_1010919SiteUtils10; }  //FORWARD
namespace MFM { template <class EC> struct Un_10411209215SiteVisitorByID10; }  //FORWARD
namespace MFM { template <class EC> struct Uq_10109210DebugUtils10; }  //FORWARD
namespace MFM { template <class EC> struct Uq_10109211SiteVisitor10; }  //FORWARD
namespace MFM { template <class EC> struct Un_102329211OutOfBounds10; }  //FORWARD
namespace MFM { template <class EC> struct Un_1035449217SiteVisitorByType10; }  //FORWARD

namespace MFM{

  template<class EC>
  class Ue_102158EggShell10 : public UlamElement<EC> /*, Uq_10106UrSelf10 */  {
    // Extract short names for parameter types
    typedef typename EC::ATOM_CONFIG AC;
    typedef typename AC::ATOM_TYPE T;
    enum { BPA = AC::BITS_PER_ATOM };

    typedef BitVector<BPA> BV; //gcnl:NodeBlockClass.cpp:1621
    typedef BitField<BitVector<BPA>, VD::BITS, T::ATOM_FIRST_STATE_BIT, 0> BFTYP; //gcnl:NodeBlockClass.cpp:1624


  public:

    Ue_102158EggShell10(); //gcnl:NodeBlockClass.cpp:1441
    ~Ue_102158EggShell10(); //gcnl:NodeBlockClass.cpp:1446

    static Ue_102158EggShell10 THE_INSTANCE; //gcnl:NodeBlockClass.cpp:1452

//! EggShell.ulam:11: 	SiteUtils su;
    typedef Uq_1010919SiteUtils10<EC> Ut_Um_2su; //offset 0u //gcnl:NodeVarDeclDM.cpp:1065

//! EggShell.ulam:12: 	EventWindow ew;
    typedef Uq_10109211EventWindow10<EC> Ut_Um_2ew; //offset 0u //gcnl:NodeVarDeclDM.cpp:1065

//! EggShell.ulam:14: 	ClusterByID cl;
    typedef Uq_10109211ClusterByID10<EC> Ut_Um_2cl; //offset 0u //gcnl:NodeVarDeclDM.cpp:1065

//! EggShell.ulam:16: 	typedef EventWindow.SiteNum SiteNum;

//! EggShell.ulam:17: 	typedef Cell.ID ID;

//! EggShell.ulam:19: 	ID id;
    typedef UlamRefFixed<EC, 0u, 10u> Up_Um_2id; //gcnl:NodeVarDeclDM.cpp:1095

//! EggShell.ulam:20: 	Bool onCell;
    typedef UlamRefFixed<EC, 10u, 1u> Up_Um_6onCell; //gcnl:NodeVarDeclDM.cpp:1095

//! EggShell.ulam:21: 	Unsigned(3) lost;
    typedef UlamRefFixed<EC, 11u, 3u> Up_Um_4lost; //gcnl:NodeVarDeclDM.cpp:1095

//! EggShell.ulam:22: 	Bool first;
    typedef UlamRefFixed<EC, 14u, 1u> Up_Um_5first; //gcnl:NodeVarDeclDM.cpp:1095

    static void Uf_6behave(const UlamContext<EC>& uc, UlamRef<EC>& ur); //virtual //gcnl:SymbolFunction.cpp:451

    //and its contextual type info for virtual table entries:
    typedef void (* Uf_6behave10) (const UlamContext<EC>&, UlamRef<EC>& ); //gcnl:SymbolFunction.cpp:518
    void Uf_9214createNeighbor(const UlamContext<EC>& uc, UlamRef<EC>& ur) const; //gcnl:SymbolFunction.cpp:463

    void Uf_5hatch(const UlamContext<EC>& uc, UlamRef<EC>& ur) const; //gcnl:SymbolFunction.cpp:463

    Ui_Ut_10111b<EC> Uf_919onNucleus(const UlamContext<EC>& uc, UlamRef<EC>& ur, Ui_Ut_102961a<EC>& Uv_1a) const; //gcnl:SymbolFunction.cpp:463

    Ui_Ut_10111b<EC> Uf_6onGene(const UlamContext<EC>& uc, UlamRef<EC>& ur, Ui_Ut_102961a<EC>& Uv_1a) const; //gcnl:SymbolFunction.cpp:463

    void Uf_9210clusterEgg(const UlamContext<EC>& uc, UlamRef<EC>& ur) const; //gcnl:SymbolFunction.cpp:463

    //BUILT-IN FUNCTIONS:

    const UlamClassDataMemberInfo & GetDataMemberInfo(u32 dataMemberNumber) const; //gcnl:NodeBlockClass.cpp:2664

    s32 GetDataMemberCount() const; //gcnl:NodeBlockClass.cpp:2728

    const char * GetMangledClassName() const; //gcnl:NodeBlockClass.cpp:2779

    virtual u32 GetClassLength() const; //gcnl:NodeBlockClass.cpp:1992

    virtual const unsigned char * GetString(u32 sidx) const; //gcnl:NodeBlockClass.cpp:2509

    virtual u32 GetStringLength(u32 sidx) const; //gcnl:NodeBlockClass.cpp:2579

    virtual T BuildDefaultAtom() const; //gcnl:NodeBlockClass.cpp:2046

    static VfuncPtr m_vtable[2]; //gcnl:NodeBlockClass.cpp:2287
    virtual VfuncPtr getVTableEntry(u32 idx) const; //gcnl:NodeBlockClass.cpp:2291

    //helper method not called directly
    bool internalCMethodImplementingIs(const UlamClass<EC> * cptrarg) const; //gcnl:NodeBlockClass.cpp:1933

    //helper method not called directly
    bool internalCMethodImplementingIs(const T& targ) const; //gcnl:NodeBlockClass.cpp:2383

    const u32 ReadTypeField(const BV bv); //gcnl:NodeBlockClass.cpp:2416

    void WriteTypeField(BV& bv, const u32 v); //gcnl:NodeBlockClass.cpp:2419

  };

  template<class EC>
  Ue_102158EggShell10<EC> Ue_102158EggShell10<EC>::THE_INSTANCE;



} //MFM

#include "Ue_102158EggShell10.tcc"
#endif //UE_102158EGGSHELL10_H
