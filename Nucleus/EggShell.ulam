/**
	\symmetries all
	\author Spencer Harmon
	\license lgpl
	\color #b52
	\symbol Eg
	\radius 1

	form a protective layer over our buried genes in the base layer, then birth them into the event layer.
 */
element EggShell{
	SiteUtils su;
	EventWindow ew;
	DebugUtils du;

	typedef EventWindow.SiteNum SiteNum;
	typedef Cell.ID ID;

	ID id;
	Bool onCell;
	Bool complete;
	Unsigned(3) wait;

	Void createNeighbor(){
//		SiteNum slot = cl.emptySlotNearMe();
		EggShell eg;
		eg.id = id;
//		if(slot != 0){
//			ew[slot] = eg;
//		}
		for(SiteNum slot = 1; slot<=4; ++slot){
			if(ew.isEmpty(ew[slot]){
				ew[slot] = eg;
			}
		}
	}
	Void hatch(){
		du.print("Hatch");
		createNeighbor();
		Atom a = su.getBase();
		Empty e;
		su.setBase(e);
//		SiteNum slot = cl.emptySlotNearMe();
//		if(slot != 0){
			ew[0] = a;
//		}
	}
	Bool onNucleus(Atom a){
		if(a as Nucleus){
			if(a.id == id){
				du.print("On Nucleus");
				return true;
			}else{
				return false;
			}
		}else{
			return false;
		}
	}
	Bool onGene(Atom a){
		if(a as Gene){
			if(a.id == id){
				du.print("On Gene");
				return true;
			}else{
				return false;
			}
		}else{
			return false;
		}
	}
//        Void clusterEgg(){
//                for(SiteNum i = 1; i <= 40;++i){
//                        Atom a = ew[i];
//                        if(a as EggShell){
//                                if(a.id == id && onCell && !a.onCell){
//                                        SiteNum e = cl.nonCellSlotNearMe(self,id,1);
//nope                                  ew.swap(i,e);
//                                }
//                        }
//                }
//        }
	Void edgeBehavior(){
		WindowScanner ws;
		SiteVisitorByID sv;

		
	}
	Void neighborCheck(){
		du.print("neighborCheck()");
		//die if no "oncell" neighbors
		Bool dontdie = false;
		Unsigned site = 0;
		
		for(SiteNum i = 1; i >= 4; ++i){
			Atom a = ew[i];
			if(a as EggShell){
				if(a.id == id){
					du.print("Found fam.");
					dontdie = true;
					++site;
				}
			}
		}
		if(site >= 4u){
			complete = true;
		}
		if(!dontdie && !onCell){
			Empty e;
			ew[0] = e;
		}
	}
	Void behave(){
		Atom a = su.getBase();
		Bool onN = onNucleus(a);
		Bool onG = onGene(a);
		if(onN){
			onCell = true;
			createNeighbor();
			if(wait == wait.maxof){
				hatch();
			}
		//	if(complete){
				++wait;
		//	}
		}
		if(onG){
			onCell = true;
			createNeighbor();
			if(wait >= wait.maxof/2){
				hatch();
			}
		//	if(complete){
				++wait;
		//	}
		}
//		clusterEgg();
		if(!onN && !onG){
			onCell = false;
	//		if(complete){
	//			Empty e;
	//			ew[0] = e;
	//		}
		}
		neighborCheck();
	}
}
