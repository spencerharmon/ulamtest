/**

    \sa WindowServices
    \author Dave Ackley
  as mangled by:
    \author Spencer Harmon
    \license lgpl
 */
transient SiteVisitorByID : SiteVisitor {
  typedef EventWindow.SiteNum SiteNum;
  AtomUtils au;
  EventWindow ew;

  typedef Cell.Seqno Seqno;
  typedef Cell.ID ID;
  typedef Unsigned(16) ElementType;
  typedef WindowScanner.Category Category;
  constant Unsigned cCATEGORY_COUNT = Category.maxof + 1;// XXX Wish it was: WindowScanner.cCATEGORY_COUNT;

  Seqno mSeqno[cCATEGORY_COUNT];
  Seqno mTreeno[cCATEGORY_COUNT];
  ID mID[cCATEGORY_COUNT];
  ElementType mType[cCATEGORY_COUNT];
  Bool mSeqnoInUse[cCATEGORY_COUNT];
  Bool mTreenoInUse[cCATEGORY_COUNT];
  Bool mIDInUse[cCATEGORY_COUNT];
  Bool mInUse[cCATEGORY_COUNT];
  Bool mInvert[cCATEGORY_COUNT];
  Bool mNeighbor[cCATEGORY_COUNT];

  Void reset() {
    for (Unsigned i = 0; i < cCATEGORY_COUNT; ++i) 
      unsetType((Category) i);
  }
  
  Void setType(Category c, ElementType et) {
    mType[c] = et;
    mInUse[c] = true;
  }

  Void setID(Category c, ID id) {
    mID[c] = id;
    mInUse[c] = true;
  }

  Void setTreeno(Category c, Seqno treeno) {
    mTreeno[c] = treeno;
    mTreenoInUse[c] = true;
    mInUse[c] = true;
  }

  Void setSeqno(Category c, Seqno seqno) {
    mSeqno[c] = seqno;
    mSeqnoInUse[c] = true;
    mInUse[c] = true;
  }

  Void unsetType(Category c) {
    mInUse[c] = false;
    mType[c] = 0;
  }

  ID getID(SiteNum sn){
    Atom a = ew[sn];
    if(a as Nucleus){
      return a.id;
    }
    if(a as QGene){
      return a.id;
    }
    else{
      return 0;
    }
  }

  Seqno getTreeno(SiteNum sn){
    Atom a = ew[sn];
    if(a as Gene){
      return a.treeno;
    }
    if(a as Tree){
      return a.treeno;
    }
    if(a as ChildGene){
      return a.treeno;
    }
    else{
      return 0;
    }
  }

  //I named this invert before I realized the existance, and importance,
  //of the other kinds of inversion.
  Void invert(Category c){
    mInvert[c] = true;
  }
  Void neighborCell(Category c){
    mNeighbor[c] = true;
  }
  Seqno getSeqno(SiteNum sn){
    Atom a = ew[sn];
    if(a as Gene){
      return a.seqno;
    }
    else{
      return (Seqno)0;
    }
  }

  virtual Void visit(WindowScanner& wsrv, Atom & a, SiteNum sn){
    ElementType et = (ElementType) au.getType(a);
    ID id = getID(sn);
    Seqno seqno = getSeqno(sn);
    Seqno treeno = getTreeno(sn);

    for (Unsigned i = 0; i < cCATEGORY_COUNT; ++i){
      if(mSeqnoInUse[i]){
        if (mInUse[i] && mType[i] == et && (ID) mID[i] == (ID) id && mSeqno[i] == seqno){
          wsrv.categorize(sn, (Category) i);
        }
      }
      if(mTreenoInUse[i] && mIDInUse[i]){
        if (mInUse[i] && mType[i] == et && (ID) mID[i] == (ID) id && mTreeno[i] == treeno){
          wsrv.categorize(sn, (Category) i);
        }
      }else if(mTreenoInUse[i]){
        //childgenes don't have ids
        if (mInUse[i] && mType[i] == et && mTreeno[i] == treeno){
          wsrv.categorize(sn, (Category) i);
        }
      }
      if(mInvert[i]){
        if (mInUse[i] && (mType[i] != et || (ID) mID[i] != (ID) id)){
          wsrv.categorize(sn, (Category) i);
        }
      }
      if(!mInvert[i] && mNeighbor[i]){
        if (mInUse[i] && (mType[i] == et) && ((ID) mID[i] != (ID) id)){
          wsrv.categorize(sn, (Category) i);
        }
      }
      if(!mInvert[i] && !mNeighbor[i]){
        if (mInUse[i] && (mType[i] == et) && ((ID) mID[i] == (ID) id)){
          wsrv.categorize(sn, (Category) i);
        }
      }
    }
  }
}
