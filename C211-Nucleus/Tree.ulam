/**
  \author Spencer Harmon
  \license lgpl
  \symbol Tr
  \color #fee
  \symmetries all
 */
element Tree : QGene{
  Seqno treeno;

  Void behave(){
    value = dt.selfEvaluate();
    killCopies();
    Bool touchingMembrane = false;
    SiteNum slot = 0;
    for(SiteNum i = 4; i > 0; --i){
      Atom a = ew[i];
      if(a as InnerMembrane){
        if(a.set){
          touchingMembrane = true;
          ew.changeSymmetry(a.sym);
        }
      }
    }
    if(touchingMembrane){
      Atom s = ew[1];
      if(s as Empty){
        slot = (SiteNum) 1;
      }
    }else{
      
      for(SiteNum i = 4; i > 0; --i){
        Atom a = ew[i];
        if(a as Empty){
          slot = i;
        }
      }
    }
    SiteNum sNucleus = cl.nucleusSiteNum(id);
    if(sNucleus > 0){
      //don't move and check if we're reproducing.
      Atom aNucleus = ew[sNucleus];
      if(aNucleus as Nucleus){
        self.reproducing = aNucleus.reproducing;
        if(reproducing){
          //even and odd are copied based on reprotype
          if(aNucleus.reproType == 0u){
            if(treeno % 2 == 0){
              du.print("even");
              copy(aNucleus.childID);
              slot = cl.emptySlotNearMe();
              ChildGene cg;
              cg.childID = aNucleus.childID;
              cg.treeno = treeno;
              if(slot > 0){
                ew[slot] = cg;
              }
            }
          }else{
            if(treeno % 2 == 1){
              du.print("odd");
              copy(aNucleus.childID);
              slot = cl.emptySlotNearMe();
              ChildGene cg;
              cg.childID = aNucleus.childID;
              cg.treeno = treeno;
              if(slot > 0){
                ew[slot] = cg;
              }
            }
          }
        }
      } 
      cl.bringGenesCloser(id, treeno);
    }else if(slot != (SiteNum) 0){
      ew.swap(0,slot);
    }
  }
}
