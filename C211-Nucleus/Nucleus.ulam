use Cell;
/**
  Nucleus reads Genes to determine its behavior

  \symbol Nu
  \author Spencer Harmon
  \license lgpl
  \color #1f0

 */
element Nucleus : QContent{
  EventWindow ew;
  Random r;
  Cell cell;
  AtomUtils au;
  SiteUtils su;
  DebugUtils du;
  ClusterByID cl;
  DecisionTree dt;
  
  //typedefs
  typedef ColorUtils.ARGB ARGB;
  typedef Cell.ID ID;
  typedef Cell.Com Com;
  typedef Cell.Seqno Seqno;
  typedef DecisionTree.StoredValue StoredValue;
  typedef EventWindow.SiteNum SiteNum;
  typedef AtomUtils.Type ElementType;
  typedef WindowScanner.Category Category;
  typedef EventWindow.Symmetry Symmetry;

  //data members
  ID id; //the all-important cluster id
  ID parent1id;
  ID parent2id;

  //probably should have called this "genecopy" or something
  Bool reproducing;
  Unsigned(7) refractoryPeriod;
  Unsigned(10) lifespan;
  StoredValue comIn;
  StoredValue comOut;
  ID childID;
  Symmetry sym;
  //0 = spawning, 1 = ovulating
  Unsigned(1) reproType;

  Bool dieOfOldAge(){
    if(lifespan == lifespan.maxof){
      Empty e;
      ew[0] = e;
      return true;
    }
    else{
      return false;
    }
  }
  Bool notIncest(Atom mate){
    if(mate as Nucleus){
      if(parent1id == mate.parent1id || 
      parent1id == mate.parent1id || 
      parent1id == mate.parent2id || 
      parent2id == mate.parent1id || 
      parent2id == mate.parent2id ||
      id == mate.parent1id ||
      id == mate.parent2id ||
      parent1id == mate.id || 
      parent2id == mate.id){
        return false;
      }
    }else{
      return true;
    }
    //because g++ gets mad
    return true;
  }
  Void laySpawn(){
    refractoryPeriod = refractoryPeriod.maxof;
    reproducing = true;

    Nucleus child;
    child.parent1id = id;
    child.id = childID;
    su.setBase(child);
  }
  SiteNum nucleusScan(){
                SiteVisitorByID sv;
                WindowScanner ws;

                ws.resetCategories();
                Category cNucleus = ws.allocateCategory();
                Nucleus aNucleus;
                ElementType tNucleus = au.getValidType(aNucleus);

                sv.setType(cNucleus,tNucleus);
                sv.setID(cNucleus,id);
    sv.neighborCell(cNucleus);

                ws.scan(sv);

                SiteNum slot = ws.getSiteNum(cNucleus);
    if(slot <= 40){
      return slot;
    }else{
      return (SiteNum)0;
    }
  }
  Bool dontStepOnEggs(){
    Atom a = su.getBase();
    if(a as Nucleus){
      if(a.id == childID){
        return true;
      }
    }else if(a as Gene){
      if(a.id == childID){
        return true;
      }
    }
    return false;
  }
  Void whetherToMove(Bool move){
    if(move = true){
      ew.changeSymmetry(sym);
      diffuse();
    }else{
      cl.bringTreesCloser(id);
    }
  }
  Bool onEgg(){
    Atom a = su.getBase();
    if(a as Nucleus){
      if(a.id == childID){
        return true;
      }else{
        return false;
      }
    }else if(a as Gene){
      if(a.id == childID){
        return true;
      }else{
        return false;
      }
    }else{
      return false;
    }
  }
  SiteNum farthestGene(){
    SiteNum ret;
    for(SiteNum i = 41; i > 0; --i){
      Atom a = ew[i];
      if(a as Gene){
        if(a.id == id){
          ret = i;
        }
      }
    }
    return ret;
  }
  Void diffuse(){
    Atom a = ew[1];
    if(onEgg()){
      SiteNum slot = cl.emptySlotNearMe();
      if(slot == 0){
        slot = farthestGene();
      }
      ew.swap(0,slot);
    }else if(a as Empty){
      ew.swap(0,1);
    }else if(a as Gene){
      if (a.id == id){
        ew.swap(0,1);
      }
    }
  }
  //kill self if no genes. 
  Bool geneCheck(){
    for(Seqno i = 1; i <= 40; ++i){
      Atom a = ew[i];
      if(a as Gene){
        if(a.id == id){
          return true;
        }
      }
    }
    return false;
  }
  Void layEgg(){
    EggShell eg;
    eg.id = childID;
    eg.first = true;
    for(Unsigned i; i < 2u; ++i){
      SiteNum emptySlot = cl.emptySlotNearMe();
      if(emptySlot != 0){
        ew[emptySlot] = eg;
      }
    }
  }
  Void die(){
    Empty e;
    ew[0] = e;
  }
  Void killCopies(){
    for(SiteNum slot = 1; slot <=40; ++slot){
      Atom a = ew[slot];
      if(a as Nucleus){
        if(a.id == self.id){
          Empty e;
          ew[0] = e;
        }
      }
    }
  }
  Void eqTreeBehavior(){
    killCopies();
    Bool move = dontStepOnEggs();

    Atom movement = dt.findTreeno((Seqno)1, id);
    if(movement as Tree){
      if(movement.value !=0){
        if(r.oneIn((Unsigned)movement.value)){ 
          move = true;
        }
      }
    }

    Atom com = dt.findTreeno((Seqno)2, id);
    if(com as Tree){
      comOut = com.value;
    }

    if(refractoryPeriod > 0){
      if(refractoryPeriod > refractoryPeriod.maxof*80/100
        && refractoryPeriod <= refractoryPeriod.maxof){
        if(reproType == 0u){
          laySpawn();
        }else{
          layEgg();
        }
      }else if(refractoryPeriod <= refractoryPeriod.maxof*75/100){
        reproducing = false;
        childID = 0;
        eqTreeBehavior();
      }else eqTreeBehavior();
    }

    Atom reproduce = dt.findTreeno((Seqno)3, id);
    if(reproduce as Tree){
      if(reproduce.value > 0){
        Atom base = su.getBase();
        if(base as Nucleus){
          if(base.parent1id != id){
            //fertilize spawn in base layer and lay egg.
            base.parent1id = id;
            reproducing = true;
            refractoryPeriod = refractoryPeriod.maxof;
            childID = base.id;
            su.setBase(base);
            reproType = 1;
            layEgg();
          }else if(r.oneIn((Unsigned)reproduce.value)){
            reproType = 0;
            laySpawn();
          }
        }
      }
    }

    Atom direction = dt.findTreeno((Seqno)4, id);
    if(direction as Tree){
      sym = (Symmetry)(direction.value % 8);
    }
    whetherToMove(move);
    for(SiteNum i = 4; i > 0; --i){
      Atom a = ew[i];
      if(a as InnerMembrane){
        a.sym = sym;
        a.new_sym = true;
        a.set = true;
        ew[i] = a;
      }
    }
  }
  Void behave(){
    ++lifespan;
    --refractoryPeriod;
    if(!dieOfOldAge()){
      eqTreeBehavior();
    }
  }
}
