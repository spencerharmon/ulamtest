/**
  The idea is to construct a decision tree using Genes
  
  \author Spencer Harmon
  \license lgpl
 */
quark DecisionTree{
  Random r;
  DebugUtils du;
  EventWindow ew;
  AtomUtils au;

  typedef Cell.Seqno StoredValue;

  typedef AtomUtils.Type ElementType;
  typedef WindowScanner.Category Category;
  typedef Cell.Seqno Seqno;
  typedef Cell.ID ID;
  typedef EventWindow.SiteNum SiteNum;
  typedef QGene.TreeOperator TreeOperator;

  Atom findSeqno(Seqno treeno, Seqno seqno, ID id){
    Empty e;

    for(SiteNum i = 1; i <=40; ++i){
      Atom gene = ew[i];
      if(gene as Gene){
        if(gene.id == id && gene.seqno == seqno && gene.treeno == treeno){
          return gene;
        }
      }
    }
    return e;    
  }
  Atom findTreeno(Seqno treeno, ID id){
    Empty e;

    for(SiteNum i = 1; i <=40; ++i){
      Atom tree = ew[i];
      if(tree as Tree){
        if(tree.id == id && tree.treeno == treeno){
          return tree;
        }
      }
    }
    return e;    
  }
  StoredValue evaluate(Seqno treeno, Seqno seqno, ID id, StoredValue comIn){
    Bool evaluated[40];
    Bool checked[40];

    StoredValue value[40];
    Seqno parent[40];

    Unsigned(2) op[40];

    Bits(2) tree0Type[40];
    StoredValue eqTree0[40];

    Bits(2) tree1Type[40];
    StoredValue eqTree1[40];

    Bool keepRecursing = true;

    Unsigned(2) dejavu;
    while(keepRecursing){
      if(evaluated[seqno]){
        return value[seqno];
      }
      if(!evaluated[seqno] && !checked[seqno]){
        //
        //Populate some stuff.
        //
        Atom gene = findSeqno(treeno, seqno, id);
        
        //will only return here if checked wasn't set because gene
        //seqno wasn't found. 
        //dejavu tells us if we're scanning one too many times.
        ++dejavu;
        if(dejavu > 1){
          return (StoredValue) 0;
        }
        if(gene as Gene){
          checked[seqno] = true;

          op[seqno] = gene.op;

          tree0Type[seqno] = gene.tree0Type;
          eqTree0[seqno] = gene.eqTree0;

          tree1Type[seqno] = gene.tree1Type;
          eqTree1[seqno] = gene.eqTree1;
        }
      }
      //
      // prepare comIn value and call it a terminator
      //
      if(tree0Type[seqno] == 1 && eqTree0[seqno] == 0){
        tree0Type[seqno] = 0;
        eqTree0[seqno] = comIn;
      }
      if(tree1Type[seqno] == 1 && eqTree1[seqno] == 0){
        tree0Type[seqno] = 0;
        eqTree0[seqno] = comIn;
      }
      //
      // Do maths operation if child nodes are terminator type.
      // Pass control back to parent.
      //
      if(tree0Type[seqno] == 0 && tree1Type[seqno] == 0){
        value[seqno] = operate(eqTree0[seqno], op[seqno], eqTree1[seqno]);
        evaluated[seqno] = true;
        keepRecursing = true;
        seqno = parent[seqno];
      }
      //
      // Collapse child nodes and recurse
      //
      if(tree0Type[seqno] == 1){
        Seqno childseqno = (Seqno)eqTree0[seqno];
        if(!evaluated[childseqno]){
          parent[childseqno] = seqno;
          seqno = childseqno;
          keepRecursing = true;
        }
        else{
          tree0Type[seqno] = 0;
          eqTree0[seqno] = value[childseqno];
          keepRecursing = true;
        }  
      }
      else{
        if(tree1Type[seqno] == 1){
          Seqno childseqno = (Seqno)eqTree1[seqno];
          if(!evaluated[childseqno]){
            parent[childseqno] = seqno;
            seqno = childseqno;
            keepRecursing = true;
          }
          else{
            tree1Type[seqno] = 0;
            eqTree1[seqno] = value[childseqno];
            keepRecursing = true;
          }
        }
      }
    }// while keepRecursing loop
    //g++ complains without returning something at this namespace, even though
    //control shouldn't reach here.
    return value[seqno];
  }//evaluate() namespace
  StoredValue comIn(){
    for(SiteNum i; i <= 41; ++i){
      Atom a = ew[i];
      if(a as OuterMembrane){
        StoredValue test;
        test = test.maxof;
        return test;
      }
    }
    return (StoredValue) 0;
  }
  StoredValue selfEvaluate(){
    StoredValue val0;
    StoredValue val1;
    TreeOperator op;
    Bool val0set = false;
    Bool val1set = false;
    Atom my = ew[0];
    if(my as Gene){
      op = my.op;
      if(my.tree0Type == 2 && my.eqTree0 == 0){
        val0 = comIn();
        val0set = true;
      }else if(my.tree0Type == 2 && my.eqTree0 > 0){
        val0set = true;
        Atom tree = findTreeno((Seqno)my.eqTree0, my.id);
        if(tree as Tree){
          val0 = tree.value;
          val0set = true;
        }
      }else if(my.tree0Type == 1){
        Atom gene = findSeqno(my.treeno,(Seqno)my.eqTree0, my.id);
        if(gene as Gene){
          val0 = gene.value;
          val0set = true;
        }
      }else if(my.tree0Type == 0){
        val0 = my.eqTree0;
        val0set = true;
      }

      if(my.tree1Type == 2 && my.eqTree1 == 0){
        val1 = comIn();
        val1set = true;
      }else if(my.tree1Type == 2 && my.eqTree1 > 0){
        my.tree1Type = 0;
        
        Atom tree = findTreeno((Seqno)my.eqTree1, my.id);
        if(tree as Tree){
          val1 = tree.value;
          val1set = true;
        }
      }else if(my.tree1Type == 1){
        Atom gene = findSeqno(my.treeno, (Seqno)my.eqTree1, my.id);
        if(gene as Gene){
          val1 = gene.value;
          val1set = true;
        }
      }else if(my.tree1Type == 0){
        val1 = my.eqTree1;
        val1set = true;
      }
    }else if(my as Tree){
      op = my.op;
      if(my.tree0Type == 2 && my.eqTree0 == 0){
        my.tree0Type = 0;
        val0 = comIn();
        val0set = true;
      }else if(my.tree0Type == 2 && my.eqTree0 > 0){
        Atom tree = findTreeno((Seqno)my.eqTree0, my.id);
        if(tree as Tree){
          val0 = tree.value;
          val0set = true;
        }
      }else if(my.tree0Type == 1){
        Atom gene = findSeqno(my.treeno, (Seqno)my.eqTree0, my.id);
        if(gene as Gene){
          val0 = gene.value;
          val0set = true;
        }
      }else if(my.tree0Type == 0){
        val0 = my.eqTree0;
        val0set = true;
      }

      if(my.tree1Type == 2 && my.eqTree1 == 0){
        val1 = comIn();
        val1set = true;
      }else if(my.tree1Type == 2 && my.eqTree1 > 0){
        
        Atom tree = findTreeno((Seqno)my.eqTree1, my.id);
        if(tree as Tree){
          val1 = tree.value;
          val1set = true;
        }
      }else if(my.tree1Type == 1){
        Atom gene = findSeqno(my.treeno, (Seqno)my.eqTree1, my.id);
        if(gene as Gene){
          val1 = gene.value;
          val1set = true;
        }
      }else if(my.tree1Type == 0){
        val1 = my.eqTree1;
        val1set = true;
      }
    }
    if(val0set && val1set){
      StoredValue val = operate(val0, op, val1);
      return val;
    }else{
      return (StoredValue) 0;
    }
  }//selfEvaluate() namespace
  StoredValue operate(StoredValue val1, Unsigned(2) op, StoredValue val2){
    StoredValue value;
    if(op == 0){
      value = (StoredValue)(val1 + val2);
    }
    if(op == 1){
      value = (StoredValue)(val1 - val2);
    }
    if(op == 2){
      value = (StoredValue)(val1 * val2);
    }
    if(op == 3){
      value = (StoredValue)(val1 / val2);
    }
    return value;
  }
}//DecisionTree namespace
