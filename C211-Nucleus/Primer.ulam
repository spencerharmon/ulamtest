/**
  Primer is intended to create the primordial population of Nuclei since I can't think of a good way to make Nucleus do it
  without wasting bits.

  \symbol Pr;
  \symmetries all;
  \author Spencer Harmon;
  \license lgpl;

 */
element Primer : QContent{
  Random r;
  EventWindow ew;
  Cell cell;
  DecisionTree dt;
  DebugUtils du;
  
  typedef Cell.ID ID;
  typedef EventWindow.SiteNum SiteNum;
  typedef Cell.Seqno Seqno;
  typedef DecisionTree.StoredValue StoredValue;
  typedef EventWindow.Symmetry Symmetry;

  //the total number of valid variables, including default variables
  Seqno numTrees;

  //the next non-variable gene number to be created
  Seqno curgene = 0;
  //Whether the next gene created is the first in its tree
  Bool makeTree;
  //the number of genes left to create for this tree
  Seqno treeGenesLeftToCreate = 0;
  //the seqno number of the current tree
  Seqno currentTree = 0;
  //the id of the cell
  ID id;

  //whether the final gene in the last gene has been created
  Bool finished;
  //default number of trees created. Update here when new trees are added.
  constant Unsigned defaultTrees = 4;

  Bool decide(){
    Unsigned(1) odds;
    
    if(r.oneIn(odds.maxof)){
      return true;
    }
    else{
      return false;
    }
  }
  Void nucleus(){
    Atom nu = cell.makeNucleus(id,0,0);
    ew[0] = nu;
  }
  Atom nextGene(){
    Empty e;
    Atom a = e.atomof;
    if(treeGenesLeftToCreate == 0){
      if (currentTree <= numTrees){
        ++currentTree;
        curgene = 0;

        makeTree = true;
        QGene q = randGeneData();
        makeTree = false;

        Tree t;

        t.treeno = currentTree;
        t.id = q.id;
        t.op = q.op;
        t.tree0Type = q.tree0Type;
        t.eqTree0 = q.eqTree0;
        t.tree1Type = q.tree1Type;
        t.eqTree1 = q.eqTree1;
        t.value = q.value;
        t.copied = q.copied; 
        a = t;

      }else{
        finished = true;
      }
    }else{
      QGene q = randGeneData();
      Gene g;

      g.seqno = curgene;
      g.treeno = currentTree;
      g.id = q.id;
      g.op = q.op;
      g.tree0Type = q.tree0Type;
      g.eqTree0 = q.eqTree0;
      g.tree1Type = q.tree1Type;
      g.eqTree1 = q.eqTree1;
      g.value = q.value;
      g.copied = q.copied; 
      a = g;

      ++curgene;
      --treeGenesLeftToCreate;
    }
    du.print(currentTree);
    du.print(curgene);

    return a;
  }

  QGene randGeneData(){

    //These nodes and their Stored Values represent the binary tree structure and
    //content of the equation tree

    Unsigned(2) numberOfGenesToAddToMyTree;

    QGene gene;

    gene.id = id;

    //representing addition, subtraction, multiplication, and division
    gene.op = (Unsigned(2)) r.create(3);

    //
    // The below logic determines the value and type for both
    // sides of the binary tree, represented as eqTree0 and
    // eqTree1 for value and tree0Type and tree1Type for type.
    // Values are of type StoredValue, as defined in DecisionTree.ulam
    // Type can be 0 or 1. Type 0 indicates that the value of eqTreeX
    // is to be interpreted as a literal value (aka terminator), while
    // a value of 1 indicates that the corresponding eqTreeX value 
    // represents the seqno of a gene that is being referenced (aka
    // reference type). A reference could be to another gene within
    // the current tree or to one of the special variables tress.
    //
    // There is a special combination represented by treeXType 1
    // with value 0, that represents a reference to the gene's current
    // comIn value.
    //
    // valTypSwitchX provides a basis on which to make weighted random
    // selections for each possible combinations of type and value.


    Unsigned valTypSwitch0;
    Unsigned valTypSwitch1;
    
    valTypSwitch0 = r.create(100);
    
    valTypSwitch1 = r.create(100);

    //avoid special variables case if there are none
    Unsigned numOfSpecialVars = (Unsigned)(numTrees-defaultTrees);
    if(numOfSpecialVars == 0u){
      if(valTypSwitch0 >=75u){
        valTypSwitch0 -= 25u;
      }
      if(valTypSwitch1 >=75u){
        valTypSwitch1 -= 25u;
      }
    }

    // avoid creating child genes past StoredValue's max
    Seqno s;
    if(curgene + treeGenesLeftToCreate == s.maxof){
      if(valTypSwitch0 >= 40u && valTypSwitch0 < 75u){
        valTypSwitch0 -= 35u;
      }
      if(valTypSwitch1 >= 40u && valTypSwitch1 < 75u){
        valTypSwitch1 -= 35u;
      }
    }

    //30% chance
    if(valTypSwitch0 >= (Unsigned)0 && valTypSwitch0 < (Unsigned)40){
      //terminator
      gene.tree0Type = 0;

      gene.eqTree0 = (StoredValue) r.create(gene.eqTree0.maxof);
    }
    if(valTypSwitch0 >= (Unsigned)40 && valTypSwitch0 < (Unsigned)75){
      //operator (seqno reference)
      gene.tree0Type = 1;


      if(makeTree && false){
        //when makeTree is true, the reference needs to be to curgene
        //since numberofgenestoaddtomytree should always be at least one
        //in this stage
        gene.eqTree0 = (StoredValue)(curgene);
      }
      else{        
        ++numberOfGenesToAddToMyTree;
        gene.eqTree0 = (StoredValue)(curgene+numberOfGenesToAddToMyTree);
      }
    }
    if(valTypSwitch0 >= (Unsigned)75 && valTypSwitch0 < (Unsigned)100){
      //special variables, still operator type
      gene.tree0Type = 2;
      
      if(numOfSpecialVars == 1u){
        //can't use r.create on values <= 1.
        gene.eqTree0 = (StoredValue)(numOfSpecialVars + defaultTrees);
      }else{
        gene.eqTree0 = (StoredValue)(r.create((Unsigned)numOfSpecialVars-1u)+1u+defaultTrees);
      }
    }

    // SIDE 1
    //30% chance
    if(valTypSwitch1 >= (Unsigned)0 && valTypSwitch1 < (Unsigned)40){
      //terminator
      gene.tree1Type = 0;

      gene.eqTree1 = (StoredValue) r.create(gene.eqTree1.maxof);
    }
    if(valTypSwitch1 >= (Unsigned)40 && valTypSwitch1 < (Unsigned)75){
      //operator (seqno reference)
      gene.tree1Type = 1;

      if(makeTree && false){
        gene.eqTree1 = (StoredValue)(curgene);
      }
      else{        
        ++numberOfGenesToAddToMyTree;
        gene.eqTree1 = (StoredValue)(curgene+numberOfGenesToAddToMyTree);
      }
    }
    if(valTypSwitch1 >= (Unsigned)75 && valTypSwitch1 < (Unsigned)100){
      //special variables, still operator type
      gene.tree1Type = 2;
      
      if(numOfSpecialVars == 1u){
        //can't use r.create on values <= 1.
        gene.eqTree1 = (StoredValue)(numOfSpecialVars + defaultTrees);
      }else{
        gene.eqTree1 = (StoredValue)(r.create((Unsigned)numOfSpecialVars-1u)+1u+defaultTrees);
      }
    }
    
    treeGenesLeftToCreate += numberOfGenesToAddToMyTree;
    return gene;
  }

  Void killself(){
    Empty e;
    ew[0] = e;
  }
  Void behave(){
    if(numTrees == (Seqno) 0){
      id = cell.genID();
      numTrees = (Seqno)(r.create(3) + defaultTrees);
    }
    Atom a = ew[1];
    if(a as Empty){
      ew[1] = nextGene();
    }
    if(finished){
      nucleus();
    }
  }
}
